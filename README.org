#+title: Bank-Buddy: Your Financial Analysis Companion for Emacs
#+author: James Dyer
#+email: captainflasmr@gmail.com
#+language: en
#+options: ':t toc:nil author:nil email:nil num:nil title:nil
#+todo: TODO DOING | DONE
#+startup: showall

#+attr_org: :width 300px
#+attr_html: :width 100%
[[file:img/bank-buddy-banner.jpg]]

Bank Buddy is an Emacs package that provides comprehensive financial analysis and reporting capabilities for your bank statements. It processes CSV bank statement data, categorizes transactions using customizable patterns, and generates detailed reports in Org-mode format.

* Key Features

- *Asynchronous Processing*: Efficiently handles large bank statements without blocking Emacs
- *Smart Transaction Categorization*: Auto-categorizes transactions based on customizable regex patterns
- *Comprehensive Financial Reports*: Generates detailed reports in Org-mode with:
  - Transaction summaries and overviews
  - Spending category analysis
  - Top merchant identification
  - Monthly spending patterns with visual representation
  - Recurring subscription detection
- *Interactive Category Management*: Edit and refine categorization patterns directly from reports
- *Data Visualizations*: Generates charts and graphs using org-plot

* Screenshots

*Insert screenshots here*

* Whats New

** <2025-04-09> 0.1.0

Refactor code and improve customization options

- Remove redundant comments and simplify code structure.
- Enhance customization options by adding =defcustom= for user settings.
- Introduce new functions for better code modularity and maintainability.
- Adjust plots and visualization settings for improved clarity.

* Getting Started

** 1. Initial configuration

To potentially regenerate gnuplots

#+begin_src elisp
(require 'ob-gnuplot)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((gnuplot . t)))

(defun my-org-babel-execute-on-open ()
  (when (eq major-mode 'org-mode)
    (org-babel-map-executables nil
      (when (org-babel-get-src-block-info)
        (let ((execute-on-open (cdr (assq :execute_on_open (nth 2 (org-babel-get-src-block-info))))))
          (when execute-on-open
            (org-babel-execute-src-block)))))))

(add-hook 'org-mode-hook 'my-org-babel-execute-on-open)
#+end_src

** 2. Installation

*** Dependencies

- Emacs 26.1 or later
- csv.el
- async.el

*** MELPA

#+begin_src emacs-lisp
(use-package bank-buddy)
#+end_src

*** Manual Installation

Clone this repository:

#+begin_src
git clone https://github.com/captainflasmr/bank-buddy.git
#+end_src

**** init.el

#+begin_src emacs-lisp
(add-to-list 'load-path "path/to/bank-buddy")
(require 'bank-buddy)
#+end_src

OR

#+begin_src elisp
 (use-package bank-buddy
   :load-path "path/to/bank-buddy")
#+end_src

OR

   #+begin_src elisp
   (add-to-list 'load-path "/path/to/bank-buddy")
   (require 'bank-buddy)
   #+end_src

* Quick Start

1. Export your bank statement as a CSV file
2. Run: =M-x bank-buddy-generate-report=
3. Select your CSV file
4. Choose where to save the Org-mode report
5. Open the generated report

* Usage Guide

** Understanding CSV Format

Bank Buddy expects CSV files with at least the following columns:
- Transaction date
- Transaction description
- Debit amount

Different banks format their CSV exports differently. You may need to preprocess your CSV to match this format, I would advise to use the package =csv-mode=, open up a csv file and =C-c C-k= you way to removed unwanted columns so all you have left are those described above.

** Generating a Report

To generate a financial report:

#+begin_src 
M-x bank-buddy-generate-report
#+end_src

You'll be prompted to select an input CSV file and specify the output Org file.

The package processes the data asynchronously and a buffer will appear reporting on the analysis progress, so Emacs remains responsive even with large CSV files.

When processing is complete, you'll be asked if you want to open the generated report.

** Understanding the Report

The report is generated as an Org-mode file with sections including:

1. *Summary Overview*: Shows transaction count, date range, total spending, and average spending
2. *Top Spending Categories*: Lists the highest spending categories with percentages and averages
3. *Monthly Spending Patterns*: Displays spending over time with a visual category breakdown
4. *Top Merchants*: Lists merchants where you spend the most money
5. *Recurring Subscriptions*: Identifies and estimates costs of regular payments
6. *Transaction Size Distribution*: Shows the distribution of transaction amounts
7. *Unmatched Transactions*: Lists transactions that weren't matched by specific patterns
8. *Data Visualizations*: Charts and graphs of your financial data

** Managing Transaction Categories

Bank Buddy comes with predefined category patterns, but you'll likely want to customize these for your personal transactions. The package includes an interactive mode for managing categories.

When viewing a report, you can:

1. Navigate to an unmatched transaction (in the "Unmatched Transactions" section)
2. Press =C-c C-a= to add it to a category
3. Choose an existing category or create a new one
4. Optionally save the updated category definitions to your init file
5. Regenerate the report to see the changes

To manage existing categories or add new ones manually, customize =bank-buddy-cat-list-defines=.

** Category Format

Categories are defined as patterns in the form:

#+begin_src elisp
(REGEX-PATTERN CATEGORY-CODE)
#+end_src

Where:
- =REGEX-PATTERN= is a regular expression that matches transaction descriptions
- =CATEGORY-CODE= is a short code representing the category (e.g., "fod" for food)

For example:
#+begin_src elisp
("amazon\\|amz" "amz")  ; Amazon purchases
("netflix\\|spotify\\|youtube" "str")  ; Streaming services
#+end_src

You can customize category codes and their display names by modifying =bank-buddy-category-names=.

** Updating and Regenerating Reports

If you add or modify category patterns after generating a report:

1. With the report open, enable Bank Buddy Category mode if not already active: =M-x bank-buddy-cat-mode=
2. Press =C-c C-r= to regenerate the report with the updated categories

The report will be refreshed with the new categorization rules.

** Working with Unmatched Transactions

To quickly view and manage unmatched transactions:

#+begin_src 
M-x bank-buddy-view-unmatched-transactions
#+end_src

This opens a buffer showing transactions that weren't matched by specific patterns, with suggestions for adding them to your category definitions.

* Customization

** Core Settings

#+begin_src elisp
;; Exclude large transactions from analysis
(setq bank-buddy-exclude-large-txns t)
(setq bank-buddy-large-txn-threshold 2000)

;; Number of occurrences to detect subscriptions
(setq bank-buddy-subscription-min-occurrences 3)

;; Number of top items to display
(setq bank-buddy-top-spending-categories 5)
(setq bank-buddy-top-merchants 5)
#+end_src

** Customizing Category Patterns

You can customize the category patterns by setting =bank-buddy-cat-list-defines=:

#+begin_src elisp
(customize-set-variable 'bank-buddy-cat-list-defines
  '(("amazon\\|amz" "amz")
    ("netflix\\|spotify" "str")
    ("uber\\|lyft" "txi")
    ("sainsburys\\|tesco\\|asda" "fod")
    ;; Add your own patterns here
    (".*" "o")))  ; Catch-all pattern should be last
#+end_src

** Customizing Category Names

Category codes are mapped to human-readable names via =bank-buddy-category-names=:

#+begin_src elisp
(customize-set-variable 'bank-buddy-category-names
  '(("amz" . "Amazon")
    ("str" . "Streaming Services")
    ("txi" . "Taxi & Rideshare")
    ("fod" . "Groceries")
    ;; Add your own mappings here
    ("o" . "Other")))
#+end_src

** Customizing Subscription Detection

Define subscription patterns for better detection of recurring payments:

#+begin_src elisp
(customize-set-variable 'bank-buddy-subscription-patterns
  '(("NETFLIX" . "Netflix")
    ("SPOTIFY" . "Spotify")
    ("AMAZON PRIME" . "Amazon Prime")
    ;; Add your own patterns here
    ))
#+end_src

* Advanced Usage

** Integration with Other Financial Tools

Bank Buddy reports are generated as Org-mode files, making them compatible with other Org-based tools:

- Use =org-babel= to perform additional analysis
- Export to HTML, PDF, or other formats with Org export functions
- Use =org-capture= to add notes to specific transactions or categories

** Custom Visualization

Bank Buddy generates visualizations using =org-plot=. You can customize these by:

1. Modifying the plotting parameters in the generated report
2. Adding additional plots using =gnuplot= code blocks

** Keyboard Shortcuts

When viewing a report with =bank-buddy-cat-mode= enabled:

- =C-c C-a=: Add the transaction at point to a category
- =C-c C-r=: Regenerate the report with current category definitions

* Comparison with Other Financial Packages

Several Emacs packages exist for financial management, but they serve different purposes. Here's how Bank Buddy compares to other notable financial packages:

** Ledger-mode

[[https://github.com/ledger/ledger-mode][Ledger-mode]] is an Emacs interface to the command-line Ledger accounting system.

*Key differences:*
- Ledger is a complete double-entry accounting system; Bank Buddy is focused on bank statement analysis
- Ledger requires manual transaction entry or carefully formatted imports; Bank Buddy automates categorization
- Ledger offers more comprehensive accounting features (accounts, assets, liabilities); Bank Buddy focuses on spending insights
- Bank Buddy provides visual spending breakdowns and charts; Ledger focuses on accurate accounting

*When to use Ledger:* For complete personal finance tracking, investments, budgeting, and double-entry accounting.  
*When to use Bank Buddy:* For quick analysis of bank statements and visualizing spending patterns.

** Beancount-mode

[[https://github.com/beancount/beancount-mode][Beancount-mode]] is an Emacs mode for Beancount, another plain-text accounting system.

*Key differences:*
- Beancount, like Ledger, is a full double-entry accounting system
- Beancount has stricter syntax requirements than Ledger
- Bank Buddy offers automatic categorization and reporting, while Beancount requires manual entry
- Beancount generates sophisticated reports, but requires more setup and knowledge

*When to use Beancount:* For precise, auditable personal accounting with strict validation.  
*When to use Bank Buddy:* For simple spending analysis without learning accounting principles.

** Money

[[https://github.com/lihebi/money][Money]] is a simple package for tracking expenses in Org-mode.

*Key differences:*
- Money uses simple org-mode tables for basic expense tracking
- Money is designed for manual entry of expenses
- Bank Buddy focuses on automated analysis of bank-provided data
- Bank Buddy provides more sophisticated visualization and categorization

*When to use Money:* For simple manual expense tracking in Org.  
*When to use Bank Buddy:* For analyzing historical bank data and discovering spending patterns.

** csv-mode and orgtbl-mode

Some users analyze financial CSV data using built-in Emacs packages like csv-mode combined with org-table functionality.

*Key differences:*
- These are general-purpose tools that require manual customization for financial analysis
- Bank Buddy provides specialized, financial-specific analysis and visualization
- Bank Buddy automatically categorizes transactions based on patterns
- Bank Buddy generates comprehensive reports without manual processing

*When to use csv/orgtbl-mode:* For custom, one-off analysis of financial data.  
*When to use Bank Buddy:* For consistent, repeatable analysis of bank statements.

** Budget-mode

[[https://github.com/tlh/budget-mode][Budget-mode]] is focused on displaying budgeting information in Emacs.

*Key differences:*
- Budget-mode is designed for forward-looking budgeting
- Bank Buddy performs historical analysis of past transactions
- Budget-mode has fewer automated features
- Bank Buddy's category management is more sophisticated

*When to use Budget-mode:* For budget planning and tracking.  
*When to use Bank Buddy:* For understanding past spending patterns.

* Roadmap                                                           :roadmap:

#+begin_src emacs-lisp :results table :exports results :tangle no
(my/kanban-to-table "roadmap" "issues")
#+end_src

#+RESULTS:
| TODO                      | DOING                                                 | DONE                   |
|---------------------------+-------------------------------------------------------+------------------------|
| Add Paypal break down csv | Highlight bank lines not matched for iterative tweaks | Asynchronous operation |
| Add large sum outlays     | Generate test data and unit test                      |                        |
| Budget Tracking           | Data Visualization                                    |                        |
| AI-Powered Categorization | Better gnuplot autogeneration of plots                |                        |
|                           | Custom Category Mapping                               |                        |

** DOING Highlight bank lines not matched for iterative tweaks

** DOING Generate test data and unit test

** DOING Data Visualization

Add interactive charts and graphs using Org-babel

** DOING Better gnuplot autogeneration of plots

** DOING Custom Category Mapping

Allow user-defined categories

** TODO Add Paypal break down csv

** TODO Add large sum outlays

** TODO Budget Tracking

Compare spending against budgeted amounts

** TODO AI-Powered Categorization

Use LLM to improve categorization accuracy

** DONE Asynchronous operation
The report especially on a thousand line csv can take some seconds

* Troubleshooting

** CSV Parsing Issues

If your bank's CSV format is not recognized:

1. Check that your CSV has columns for date, description, and debit amount
2. Pre-process the CSV if necessary to match the expected format
3. Check for encoding issues if you see garbled text in reports

** Performance Considerations

Bank Buddy processes CSV files asynchronously to avoid blocking Emacs. However, with very large files:

1. Initial parsing may take longer
2. Generated reports might be large
3. Consider filtering or pre-processing very large CSV files

** Common Issues

- *Unmatched Transactions*: Review and add patterns for your common merchants
- *Duplicate Categories*: Check for overlapping regex patterns
- *Date Format Issues*: Ensure dates are in YYYY-MM-DD format for best results

* Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

* License

This project is licensed under the GPL-3.0 License - see the LICENSE file for details.

* Acknowledgments

- Emacs community for continuous inspiration
