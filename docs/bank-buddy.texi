\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename bank-buddy.info
@settitle Bank Buddy User Manual
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@copying
Copyright @copyright{} 2025 Your Name

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end copying

@dircategory Emacs
@direntry
* Bank Buddy: (bank-buddy). Enhanced financial analysis for Emacs.
@end direntry

@titlepage
@title Bank Buddy User Manual
@subtitle Enhanced financial analysis for Emacs
@author Your Name
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@ifnottex
@node Top
@top Bank Buddy

@insertcopying
@end ifnottex

@menu
* Introduction::                Overview of Bank Buddy
* Installation::                Installing Bank Buddy
* Quick Start::                 Getting started with Bank Buddy
* CSV Format::                  Understanding the required CSV format
* Report Generation::           Creating financial reports
* Report Sections::             Understanding the generated reports
* Transaction Categories::      Customizing and managing categories
* Subscription Detection::      How recurring payments are identified
* Category Management::         Using bank-buddy-cat-mode
* Customization::               Customizing Bank Buddy
* Key Bindings::                Keyboard shortcuts
* Comparison::                  Comparison with other financial packages
* Troubleshooting::             Solutions to common problems
* Index::                       Complete index
@end menu

@node Introduction
@chapter Introduction

Bank Buddy is an Emacs package that provides comprehensive financial analysis and reporting capabilities for your bank statements. It processes CSV bank statement data, categorizes transactions using customizable patterns, and generates detailed reports in Org-mode format.

@heading Key Features

@itemize @bullet
@item @strong{Asynchronous Processing:} Efficiently handles large bank statements without blocking Emacs
@item @strong{Smart Transaction Categorization:} Auto-categorizes transactions based on customizable regex patterns
@item @strong{Comprehensive Financial Reports:} Generates detailed reports in Org-mode with various analysis sections
@item @strong{Interactive Category Management:} Edit and refine categorization patterns directly from reports
@item @strong{Data Visualizations:} Generates charts and graphs using org-plot
@item @strong{Subscription Detection:} Automatically identifies recurring payments and estimates monthly costs
@item @strong{CSV-focused Analysis:} Designed specifically for bank statement CSV files
@end itemize

@heading Why Bank Buddy?

Bank Buddy was developed to solve specific pain points in analyzing personal bank statements:

@enumerate
@item @strong{Automatic Categorization:} Most financial tools require manual categorization or complex rules for imports. Bank Buddy learns and improves categorization over time.
@item @strong{Focus on Insights:} Unlike general accounting systems that focus on balancing books, Bank Buddy helps you discover spending patterns and optimize your finances.
@item @strong{Real Bank Statement Analysis:} Designed to work directly with actual bank statement CSV exports, not idealized financial data.
@item @strong{Low Maintenance:} No need to manually enter transactions or maintain a complex financial system - just periodically analyze your bank statements.
@item @strong{Emacs Native:} Built entirely within the Emacs ecosystem, leveraging Org-mode for rich, interactive reports.
@end enumerate

@node Installation
@chapter Installation

@heading MELPA

The recommended way to install Bank Buddy is through MELPA:

@example
M-x package-install RET bank-buddy RET
(with-eval-after-load 'bank-buddy
  (add-hook 'org-mode-hook 'bank-buddy-cat-maybe-enable))
@end example

@heading Manual Installation

@enumerate
@item Download the repository or clone it:
@example
git clone https://github.com/captainflasmr/bank-buddy.git
@end example

@item Add the directory to your load path and require the package:
@example
(add-to-list 'load-path "/path/to/bank-buddy")
(require 'bank-buddy)
(with-eval-after-load 'bank-buddy
  (add-hook 'org-mode-hook 'bank-buddy-cat-maybe-enable))
@end example
@end enumerate

@heading Dependencies

@itemize @bullet
@item Emacs 26.1 or later
@item csv.el
@item async.el
@item org-mode (for reports and plotting)
@end itemize

@node Quick Start
@chapter Quick Start

@enumerate
@item Export your bank statement as a CSV file
@item Run: @code{M-x bank-buddy-generate-report}
@item Select your CSV file
@item Choose where to save the Org-mode report
@item Open the generated report
@end enumerate

@node CSV Format
@chapter CSV Format

Bank Buddy expects CSV files with at least the following columns:
@itemize @bullet
@item Transaction date
@item Transaction description
@item Debit amount
@end itemize

Different banks format their CSV exports differently. You may need to preprocess your CSV to match this format.

For optimal results, your CSV should include:

@table @asis
@item Date format
YYYY-MM-DD format is preferred
@item Description
The merchant name or transaction description
@item Amount
Positive values for debits (money spent)
@end table

@node Report Generation
@chapter Report Generation

To generate a financial report:

@example
M-x bank-buddy-generate-report
@end example

You'll be prompted to select an input CSV file and specify the output Org file.

The package processes the data asynchronously, so Emacs remains responsive even with large CSV files. When processing is complete, you'll be asked if you want to open the generated report.

@heading Command Options

@table @code
@item bank-buddy-generate-report
Generate a financial report from a CSV file
@end table

@node Report Sections
@chapter Report Sections

The generated report is an Org-mode file with the following sections:

@heading Summary Overview

Shows transaction count, date range, total spending, and average spending metrics.

@example
* Summary Overview

- *Total Transactions Analyzed:* 137
- *Date Range:* 2024-01-01 to 2024-03-31 (91 days)
- *Total Spending:* £4,235.78
- *Average Daily Spending:* £46.55
- *Average Weekly Spending:* £325.83
@end example

@heading Top Spending Categories

Lists the highest spending categories with percentages and averages.

@example
* Top Spending Categories

1. /hse/ *Housing:* £1,200.00 (28.3%)
   - Monthly avg: £400.00, Yearly avg: £4,800.00
2. /fod/ *Food:* £875.50 (20.7%)
   - Monthly avg: £291.83, Yearly avg: £3,502.00
3. /utl/ *Utilities:* £432.25 (10.2%)
   - Monthly avg: £144.08, Yearly avg: £1,729.00
@end example

@heading Monthly Spending Patterns

Displays spending over time with a visual category breakdown.

@example
* Monthly Spending Patterns

- *Highest Month:* 2024-02 (£1,576.32)
- *Lowest Month:* 2024-01 (£1,245.78)
- *Average Monthly Spending:* £1,411.93

Each bar shows spending by category. The 3-letter codes represent categories,
with consistent ordering by overall spending (highest to lowest) across all months.
The length of each segment is proportional to its share of that month's spending.

#+begin_verse
2024-01 *£1246* /hse_____/fod___/utl_/str/
2024-02 *£1576* /hse_____/fod____/utl__/shp_/
2024-03 *£1414* /hse_____/fod___/utl__/str/web/
#+end_verse
@end example

@heading Top Merchants

Lists merchants where you spend the most money.

@example
* Top Merchants

- *Total merchant spending:* £4,235.78
- *Monthly average (all merchants):* £1,411.93
- *Yearly average (all merchants):* £16,943.12

1. *RENT-PAYMENT:* £1,200.00 (28.3%)
   - Monthly avg: £400.00, Yearly avg: £4,800.00
2. *SAINSBURYS:* £345.67 (8.2%)
   - Monthly avg: £115.22, Yearly avg: £1,382.68
@end example

@heading Recurring Subscriptions

Identifies and estimates costs of regular payments.

@example
* Recurring Subscriptions (Detected)

Estimated monthly cost from detected recurring payments: *£45.97*
(Note: Detection is based on pattern matching and frequency analysis)

1. *Netflix:* £9.99/month
2. *Spotify:* £9.99/month
3. *Amazon Prime:* £7.99/month
@end example

@heading Transaction Size Distribution

Shows the distribution of transaction amounts.

@example
* Transaction Size Distribution

- *Under £10:* 42 transactions (30.7%)
- *£10 to £50:* 65 transactions (47.4%)
- *£50 to £100:* 23 transactions (16.8%)
- *Over £100:* 7 transactions (5.1%)
@end example

@heading Unmatched Transactions

Lists transactions that weren't matched by specific patterns.

@example
* Unmatched Transactions

The following transactions were only matched by the catch-all pattern (".*").
You may want to add specific patterns for these in `bank-buddy-cat-list-defines`

#+begin_src text
CORNER-SHOP
PARKING-FEE-LONDON
JOHN-HARDWARE-STORE
#+end_src
@end example

@heading Data Visualizations

Charts and graphs of your financial data using org-plot.

@node Transaction Categories
@chapter Transaction Categories

Bank Buddy uses regular expression patterns to categorize transactions. These are defined in the variable @code{bank-buddy-cat-list-defines}.

@heading Default Categories

Bank Buddy comes with predefined categories including:

@multitable {Category Code} {Description} {Example Patterns}
@headitem Category Code @tab Description @tab Example Patterns
@item kat @tab Personal (Katherine) @tab katherine, lucinda, kate
@item trn @tab Transport @tab railw, railway, selfserve, train
@item pay @tab PayPal @tab paypal
@item utl @tab Utilities @tab virgin-media, insurance, electric, water
@item bet @tab Betting @tab sky-betting, b365, races, bet365
@item pen @tab Pension @tab stakeholde, widows
@item sav @tab Savings @tab nsibill, vines, ns&i, saver
@item txi @tab Taxi @tab uber, aqua
@item fod @tab Food @tab sainsburys, waitrose, tesco, domino, deliveroo
@item shp @tab Shopping @tab ebay, asos, next, argos, amazon
@item o @tab Other @tab .* (catch-all)
@end multitable

@heading Category Format

Categories are defined as patterns in the form:

@example
(REGEX-PATTERN CATEGORY-CODE)
@end example

Where:
@itemize @bullet
@item @code{REGEX-PATTERN} is a regular expression that matches transaction descriptions
@item @code{CATEGORY-CODE} is a short code representing the category (e.g., "fod" for food)
@end itemize

Example:
@example
("amazon\\|amz" "amz")  ; Amazon purchases
("netflix\\|spotify\\|youtube" "str")  ; Streaming services
@end example

@heading Customizing Categories

You can customize the category patterns by setting @code{bank-buddy-cat-list-defines}:

@example
(customize-set-variable 'bank-buddy-cat-list-defines
  '(("amazon\\|amz" "amz")
    ("netflix\\|spotify" "str")
    ("uber\\|lyft" "txi")
    ("sainsburys\\|tesco\\|asda" "fod")
    ;; Add your own patterns here
    (".*" "o")))  ; Catch-all pattern should be last
@end example

@heading Customizing Category Names

Category codes are mapped to human-readable names via @code{bank-buddy-category-names}:

@example
(customize-set-variable 'bank-buddy-category-names
  '(("amz" . "Amazon")
    ("str" . "Streaming Services")
    ("txi" . "Taxi & Rideshare")
    ("fod" . "Groceries")
    ;; Add your own mappings here
    ("o" . "Other")))
@end example

@node Subscription Detection
@chapter Subscription Detection

Bank Buddy can automatically detect recurring payments like subscriptions or regular bills. This is especially useful for identifying forgotten or unnecessary recurring charges.

@heading How It Works

Bank Buddy looks for transactions that:

@itemize @bullet
@item Appear multiple times (configurable via @code{bank-buddy-subscription-min-occurrences})
@item Have the same or very similar amounts
@item Occur at regular intervals (weekly, bi-weekly, monthly, or annually)
@end itemize

@heading Subscription Patterns

Define specific subscription patterns for better detection:

@example
(customize-set-variable 'bank-buddy-subscription-patterns
  '(("NETFLIX" . "Netflix")
    ("SPOTIFY" . "Spotify")
    ("AMAZON PRIME" . "Amazon Prime")
    ;; Add your own patterns here
    ))
@end example

@heading Frequency Analysis

Bank Buddy estimates the frequency of subscriptions:

@table @code
@item Weekly
Transactions occurring approximately every 5-10 days
@item Bi-weekly
Transactions occurring approximately every 11-20 days
@item Monthly 
Transactions occurring approximately every 25-35 days
@item Annual
Transactions occurring approximately every 350-380 days
@item Irregular
Transactions that occur multiple times but not at regular intervals
@end table

@node Category Management
@chapter Category Management

Bank Buddy includes an interactive mode for managing transaction categories: @code{bank-buddy-cat-mode}.

@heading Enabling bank-buddy-cat-mode

When viewing a Bank Buddy report, the mode is automatically enabled. You can also enable it manually:

@example
M-x bank-buddy-cat-mode
@end example

@heading Adding New Categories

To add a transaction to a category:

@enumerate
@item Navigate to an unmatched transaction (in the "Unmatched Transactions" section)
@item Press @code{C-c C-a} (@code{bank-buddy-cat-add-pattern})
@item Choose an existing category or create a new one
@item Optionally save the updated category definitions to your init file
@item Regenerate the report to see the changes
@end enumerate

@heading Regenerating Reports

After modifying categories, regenerate the report:

@example
C-c C-r (bank-buddy-cat-regenerate-report)
@end example

@heading Viewing Unmatched Transactions

To quickly view and manage unmatched transactions:

@example
M-x bank-buddy-view-unmatched-transactions
@end example

@heading Saving Category Definitions

When adding a new category pattern, you'll be asked if you want to save the updated definitions to your init file.

@node Customization
@chapter Customization

@heading Core Settings

@example
;; Exclude large transactions from analysis
(setq bank-buddy-exclude-large-txns t)
(setq bank-buddy-large-txn-threshold 2000)

;; Number of occurrences to detect subscriptions
(setq bank-buddy-subscription-min-occurrences 3)

;; Number of top items to display
(setq bank-buddy-top-spending-categories 5)
(setq bank-buddy-top-merchants 5)
@end example

@heading All Customizable Variables

@multitable {Variable} {Default} {Description}
@headitem Variable @tab Default @tab Description
@item bank-buddy-exclude-large-txns @tab t @tab Whether to exclude large transactions
@item bank-buddy-large-txn-threshold @tab 2000 @tab Threshold for large transactions (in currency units)
@item bank-buddy-subscription-min-occurrences @tab 3 @tab Minimum occurrences for subscription detection
@item bank-buddy-top-spending-categories @tab 5 @tab Number of top spending categories displayed
@item bank-buddy-top-merchants @tab 5 @tab Number of top merchants displayed
@item bank-buddy-cat-list-defines @tab (list...) @tab Categorization patterns for transactions
@item bank-buddy-category-names @tab (list...) @tab Human-readable category names for reporting
@item bank-buddy-subscription-patterns @tab (list...) @tab Patterns to identify specific subscriptions
@end multitable

@node Key Bindings
@chapter Key Bindings

@heading Global Bindings

@multitable {Key} {Command} {Description}
@headitem Key @tab Command @tab Description
@item None @tab bank-buddy-generate-report @tab Generate a new financial report
@item None @tab bank-buddy-view-unmatched-transactions @tab View transactions that weren't matched by specific patterns
@end multitable

@heading bank-buddy-cat-mode Bindings

@multitable {Key} {Command} {Description}
@headitem Key @tab Command @tab Description
@item C-c C-a @tab bank-buddy-cat-add-pattern @tab Add the transaction at point to a category
@item C-c C-r @tab bank-buddy-cat-regenerate-report @tab Regenerate the report with current category definitions
@end multitable

@node Comparison
@chapter Comparison

Bank Buddy can be compared to several other Emacs packages for financial management.

@heading Ledger-mode

Ledger-mode is an Emacs interface to the command-line Ledger accounting system.

@itemize @bullet
@item Ledger is a complete double-entry accounting system; Bank Buddy is focused on bank statement analysis
@item Ledger requires manual transaction entry or carefully formatted imports; Bank Buddy automates categorization
@item Ledger offers more comprehensive accounting features; Bank Buddy focuses on spending insights
@item Bank Buddy provides visual spending breakdowns and charts
@end itemize

@strong{When to use Ledger:} For complete personal finance tracking, investments, budgeting, and double-entry accounting.  
@strong{When to use Bank Buddy:} For quick analysis of bank statements and visualizing spending patterns.

@heading Beancount-mode

Beancount-mode is an Emacs mode for Beancount, another plain-text accounting system.

@itemize @bullet
@item Beancount, like Ledger, is a full double-entry accounting system
@item Beancount has stricter syntax requirements than Ledger
@item Bank Buddy offers automatic categorization and reporting
@item Beancount generates sophisticated reports, but requires more setup
@end itemize

@strong{When to use Beancount:} For precise, auditable personal accounting with strict validation.  
@strong{When to use Bank Buddy:} For simple spending analysis without learning accounting principles.

@heading Money

Money is a simple package for tracking expenses in Org-mode.

@itemize @bullet
@item Money uses simple org-mode tables for basic expense tracking
@item Money is designed for manual entry of expenses
@item Bank Buddy focuses on automated analysis of bank-provided data
@item Bank Buddy provides more sophisticated visualization
@end itemize

@strong{When to use Money:} For simple manual expense tracking in Org.  
@strong{When to use Bank Buddy:} For analyzing historical bank data and discovering spending patterns.

@heading csv-mode and orgtbl-mode

Some users analyze financial CSV data using built-in Emacs packages.

@itemize @bullet
@item These are general-purpose tools requiring manual customization
@item Bank Buddy provides specialized, financial-specific analysis
@item Bank Buddy automatically categorizes transactions
@item Bank Buddy generates comprehensive reports automatically
@end itemize

@strong{When to use csv/orgtbl-mode:} For custom, one-off analysis of financial data.  
@strong{When to use Bank Buddy:} For consistent, repeatable analysis of bank statements.

@node Troubleshooting
@chapter Troubleshooting

@heading CSV Parsing Issues

If your bank's CSV format is not recognized:

@itemize @bullet
@item Check that your CSV has columns for date, description, and debit amount
@item Pre-process the CSV if necessary to match the expected format
@item Check for encoding issues if you see garbled text in reports
@end itemize

@heading Performance Considerations

Bank Buddy processes CSV files asynchronously to avoid blocking Emacs. However, with very large files:

@itemize @bullet
@item Initial parsing may take longer
@item Generated reports might be large
@item Consider filtering or pre-processing very large CSV files
@end itemize

@heading Common Issues

@table @asis
@item Unmatched Transactions
Review and add patterns for your common merchants using the category management mode
@item Duplicate Categories
Check for overlapping regex patterns in your category definitions
@item Date Format Issues
Ensure dates are in YYYY-MM-DD format for best results
@item Category Mistakes
If transactions are being assigned to the wrong categories, review your regex patterns, particularly those that might be too broad
@end table

@node Index
@unnumbered Index

@printindex cp

@bye
